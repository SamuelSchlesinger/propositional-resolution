
==================== FINAL INTERFACE ====================
2017-10-06 02:56:28.3773069 UTC

interface resolution-0.1.0.0-iG04QhB07j5BCiz7AO9Ej:Lib 8002
  interface hash: 51bd90d6224c0fb3c66ff1c3550da021
  ABI hash: 754a293cab08789af28e99ed2ad65396
  export-list hash: 3693adc891d9cceeff669516714b6480
  orphan hash: 7f52831cdd1d02ff08c8cb0f0d9807b7
  flag hash: cc2a91c116fe2b392e95eb56295b21c3
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.resolve
  Lib.resolveStep
  Lib.someFunc
  Lib.unterm
  Lib.vars
  Lib.varsClause
  Lib.CNF
  Lib.Clause
  Lib.Term{Lib.F Lib.T}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:System.IO 5daf3f384209c11d9566e3409af8ec5d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set 3ed2324fd1e757464a8ac2b636a64e5a
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base 7066127ea77dde3a5a3f19fd2ed3d39a
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
9a15425c886502e4d8d94dbfa1e60af7
  $fEqTerm :: GHC.Classes.Eq Lib.Term
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Lib.Term Lib.$fEqTerm_$c== Lib.$fEqTerm_$c/= -}
9a15425c886502e4d8d94dbfa1e60af7
  $fEqTerm_$c/= :: Lib.Term -> Lib.Term -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Lib.Term) (b :: Lib.Term) ->
                 case a of wild {
                   Lib.T a1
                   -> case b of wild1 {
                        Lib.T b1
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Lib.F ipv -> GHC.Types.True }
                   Lib.F a1
                   -> case b of wild1 {
                        Lib.T ipv -> GHC.Types.True
                        Lib.F b1
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
9a15425c886502e4d8d94dbfa1e60af7
  $fEqTerm_$c== :: Lib.Term -> Lib.Term -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Lib.Term) (ds1 :: Lib.Term) ->
                 case ds of wild {
                   Lib.T a1
                   -> case ds1 of wild1 {
                        Lib.T b1 -> GHC.Base.eqString a1 b1 Lib.F ipv -> GHC.Types.False }
                   Lib.F a1
                   -> case ds1 of wild1 {
                        Lib.T ipv -> GHC.Types.False
                        Lib.F b1 -> GHC.Base.eqString a1 b1 } }) -}
8499528116082601d2ead4445da792d4
  $sfromList ::
    [GHC.Base.String] -> Data.Set.Base.Set GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> Data.Set.Base.Tip @ GHC.Base.String
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Base.Bin
                             @ GHC.Base.String
                             1#
                             dt
                             (Data.Set.Base.Tip @ GHC.Base.String)
                             (Data.Set.Base.Tip @ GHC.Base.String) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 x ipv of wild2 {
                             DEFAULT
                             -> case x of dt { DEFAULT ->
                                Lib.$sfromList_go5
                                  (Data.Set.Base.Bin
                                     @ GHC.Base.String
                                     1#
                                     dt
                                     (Data.Set.Base.Tip @ GHC.Base.String)
                                     (Data.Set.Base.Tip @ GHC.Base.String))
                                  wild1 }
                             GHC.Types.LT
                             -> case x of dt { DEFAULT ->
                                Lib.$wgo5
                                  1#
                                  (Data.Set.Base.Bin
                                     @ GHC.Base.String
                                     1#
                                     dt
                                     (Data.Set.Base.Tip @ GHC.Base.String)
                                     (Data.Set.Base.Tip @ GHC.Base.String))
                                  wild1 } } } }) -}
addd53fe842b86a7b745309fbdc1b1b7
  $sfromList_go5 ::
    Data.Set.Base.Set GHC.Base.String
    -> [GHC.Base.String] -> Data.Set.Base.Set GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
a67999226a3131fdb7e9f08e79d00cf2
  $sinsert_$sgo5 ::
    GHC.Base.String
    -> Data.Set.Base.Set GHC.Base.String
    -> Data.Set.Base.Set GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
22e9b623a3d68f05e005ab0699b5ed65
  $smap ::
    (a -> GHC.Base.String)
    -> Data.Set.Base.Set a -> Data.Set.Base.Set GHC.Base.String
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   (f :: a -> GHC.Base.String)
                   (eta :: Data.Set.Base.Set a) ->
                 letrec {
                   go1 :: [GHC.Base.String]
                          -> Data.Set.Base.Set a -> [GHC.Base.String]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [GHC.Base.String]) (ds :: Data.Set.Base.Set a) ->
                     case ds of wild {
                       Data.Set.Base.Bin dt x l r
                       -> go1 (GHC.Types.: @ GHC.Base.String (f x) (go1 z' r)) l
                       Data.Set.Base.Tip -> z' }
                 } in
                 Lib.$sfromList (go1 (GHC.Types.[] @ GHC.Base.String) eta)) -}
9a1e871bf41fa73c8e509abf1a556ba1
  $tc'F :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8469366247794069985##
                   2196507473917492022##
                   Lib.$trModule
                   Lib.$tc'F1) -}
e32135cdb7803911e4b8cf588650e4cb
  $tc'F1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'F"#) -}
5c49fd0bcb67f2d37c3d3c4a15250615
  $tc'T :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   656306587740412697##
                   48562902375512563##
                   Lib.$trModule
                   Lib.$tc'T1) -}
d634bdc684facfbf3bfca59344a58eaf
  $tc'T1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'T"#) -}
b87b6818d41047317673a6f22349b658
  $tcTerm :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   135887292183815664##
                   17851258686487143542##
                   Lib.$trModule
                   Lib.$tcTerm1) -}
7192e7c906f28985dbd083b9624cf5fb
  $tcTerm1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Term"#) -}
d9627a3e2bb05f738d8880adfde4e913
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
0892dcc42be616998196770a825e6638
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
31623fd3a1ba700bc13ef475cf244c8c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "resolution-0.1.0.0-iG04QhB07j5BCiz7AO9Ej"#) -}
ad2597ad21fbdf0ada6ba8e5b99d8819
  $wgo5 ::
    GHC.Prim.Int#
    -> Data.Set.Base.Set GHC.Base.String
    -> [GHC.Base.String]
    -> Data.Set.Base.Set GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
2875da375568224156ce0173ed354f4a
  type CNF = Data.Set.Base.Set Lib.Clause
608034e377b2b361ee4632d6a7df3554
  type Clause = Data.Set.Base.Set Lib.Term
9a15425c886502e4d8d94dbfa1e60af7
  data Term = T GHC.Base.String | F GHC.Base.String
6e94e48fe9dc12c1b8460ddf1bfe333a
  resolve :: Lib.CNF -> Lib.CNF
  {- Arity: 1, Strictness: <B,A>x,
     Unfolding: InlineRule (1, True, True)
                (\ (cnf :: Lib.CNF) -> Lib.resolve1) -}
63a5d8c1573b69ff2958aacdd0bc7f91
  resolve1 :: Data.Set.Base.Set Lib.Clause
  {- Strictness: x -}
fe96f15749b3fbd87e1105cd35964b11
  resolveStep :: Lib.CNF -> Lib.CNF
  {- Arity: 1, Strictness: <B,A>x,
     Unfolding: InlineRule (1, True, True)
                (\ (cnf :: Lib.CNF) -> Lib.resolve1) -}
8a5940529e565bb1c058360069ec6e62
  someFunc :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.someFunc1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
90d55dacb21f92fba13d8c74ff34d557
  someFunc1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Lib.someFunc2
                   GHC.Types.True
                   eta) -}
06b7ec37694909905abcdd805cee87fa
  someFunc2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "someFunc"#) -}
e241a860b19b8de53daade8a12482d5e
  unterm :: Lib.Term -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Term) ->
                 case ds of wild { Lib.T x -> x Lib.F x -> x }) -}
b98f0f5c27a09cd6eb2ef06eef184846
  vars :: Lib.CNF -> Data.Set.Base.Set GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (eta :: Data.Set.Base.Set Lib.Clause) ->
                 Lib.vars_go5 (Data.Set.Base.Tip @ GHC.Base.String) eta) -}
c72fadad89623d2eecf5cd8799134f8f
  varsClause :: Lib.Clause -> Data.Set.Base.Set GHC.Base.String
  {- Arity: 1, Unfolding: (Lib.$smap @ Lib.Term Lib.unterm) -}
967c0c5a55ceffce1c82895c4e1bda75
  vars_go5 ::
    Data.Set.Base.Set GHC.Base.String
    -> Data.Set.Base.Set Lib.Clause
    -> Data.Set.Base.Set GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
instance [safe] GHC.Classes.Eq [Lib.Term] = Lib.$fEqTerm
"SPEC/Lib fromList @ String" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                         GHC.Base.String)
  Data.Set.Base.fromList @ [GHC.Types.Char] $dOrd = Lib.$sfromList
"SPEC/Lib map @ String _" [ALWAYS] forall @ a
                                          ($dOrd :: GHC.Classes.Ord GHC.Base.String)
  Data.Set.Base.map @ [GHC.Types.Char] @ a $dOrd = Lib.$smap @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

